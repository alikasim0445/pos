/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// Give TypeScript the correct global type hints.
declare const self: ServiceWorkerGlobalScope;

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

// Use the correct type for the workbox global
declare let workbox: any;

self.skipWaiting();
clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }: { request: Request; url: URL }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith('/_')) {
      return false;
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }

    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'),
  // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// Cache API calls to enable offline functionality for critical POS data
registerRoute(
  ({ url }) => url.origin === self.location.origin && url.pathname.includes('/api/'),
  new StaleWhileRevalidate({
    cacheName: 'api-cache',
    plugins: [
      new ExpirationPlugin({ maxEntries: 100, maxAgeSeconds: 300 }), // Cache for 5 minutes
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
let authToken: string | null = null;

self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
  if (event.data && event.data.type === 'SET_AUTH_TOKEN') {
    authToken = event.data.token;
  }
});

// Handle background sync for offline transactions
self.addEventListener('sync', (event) => {
  if (event.tag === 'sync-transactions') {
    event.waitUntil(syncTransactions());
  }
});

// Function to sync offline transactions when back online
async function syncTransactions() {
  const db = await new Promise<IDBDatabase>((resolve, reject) => {
    const request = indexedDB.open('POSOfflineDB');
    request.onerror = () => reject(new Error('Failed to open IndexedDB for sync'));
    request.onsuccess = () => resolve(request.result);
  });

  const transaction = db.transaction(['offlineSales'], 'readwrite');
  const store = transaction.objectStore('offlineSales');
  const request = store.getAll();

  request.onsuccess = async () => {
    const offlineSales = request.result.filter(sale => !sale.synced);
    for (const sale of offlineSales) {
      try {
        const saleToSend = {
          cashier_id: sale.cashier_id,
          customer_id: sale.customer_id,
          warehouse_id: sale.warehouse_id,
          items: sale.items,
          payments: sale.payments,
        };

        const response = await fetch('/api/v1/sales/create/', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${authToken}`,
          },
          body: JSON.stringify(saleToSend),
        });

        if (response.ok) {
          const getRequest = store.get(sale.id);
          getRequest.onsuccess = () => {
            const saleToUpdate = getRequest.result;
            saleToUpdate.synced = true;
            store.put(saleToUpdate);
          };
        }
      } catch (error) {
        console.error('Error syncing sale:', error);
      }
    }
  };
}