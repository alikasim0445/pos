# Generated by Django 4.2 on 2025-10-16 06:47

from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('pos_app', '0012_customer_notes'),
    ]

    operations = [
        migrations.CreateModel(
            name='EcommercePlatform',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Name of the e-commerce integration', max_length=255, unique=True)),
                ('platform', models.CharField(choices=[('shopify', 'Shopify'), ('woocommerce', 'WooCommerce'), ('magento', 'Magento'), ('bigcommerce', 'BigCommerce'), ('custom', 'Custom API')], help_text='E-commerce platform type', max_length=20)),
                ('api_url', models.URLField(help_text='Base API URL for the e-commerce platform')),
                ('api_key', models.CharField(help_text='API key for authentication', max_length=255)),
                ('api_secret', models.CharField(help_text='API secret for authentication', max_length=255)),
                ('additional_config', models.JSONField(blank=True, default=dict, help_text='Additional configuration parameters')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this integration is active')),
                ('sync_products', models.BooleanField(default=True, help_text='Whether to sync products from POS to e-commerce')),
                ('sync_inventory', models.BooleanField(default=True, help_text='Whether to sync inventory from POS to e-commerce')),
                ('sync_orders', models.BooleanField(default=True, help_text='Whether to sync orders from e-commerce to POS')),
                ('last_sync', models.DateTimeField(blank=True, help_text='Last successful sync timestamp', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'E-commerce Platform',
                'verbose_name_plural': 'E-commerce Platforms',
            },
        ),
        migrations.CreateModel(
            name='PaymentGatewayConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gateway', models.CharField(choices=[('stripe', 'Stripe'), ('paypal', 'PayPal')], max_length=20, unique=True)),
                ('public_key', models.CharField(help_text='Public/API key for the gateway', max_length=255)),
                ('secret_key', models.CharField(help_text='Secret key for the gateway', max_length=255)),
                ('webhook_secret', models.CharField(blank=True, help_text='Webhook signing secret', max_length=255)),
                ('is_sandbox', models.BooleanField(default=True, help_text='Whether to use sandbox/test environment')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this gateway is currently active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Payment Gateway Configuration',
                'verbose_name_plural': 'Payment Gateway Configurations',
            },
        ),
        migrations.CreateModel(
            name='Webhook',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Name/description for this webhook', max_length=255)),
                ('target_url', models.URLField(help_text='The URL to send the webhook payload to')),
                ('event_type', models.CharField(choices=[('sale_completed', 'Sale Completed'), ('stock_level_changed', 'Stock Level Changed'), ('customer_created', 'Customer Created'), ('inventory_updated', 'Inventory Updated')], help_text='Type of event that triggers this webhook', max_length=50)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this webhook is currently active')),
                ('secret', models.CharField(blank=True, help_text='Secret key for webhook signature verification', max_length=255)),
                ('headers', models.JSONField(blank=True, default=dict, help_text='Additional headers to send with webhook')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_triggered', models.DateTimeField(blank=True, help_text='When this webhook was last triggered', null=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='return',
            name='is_locked',
            field=models.BooleanField(default=False, help_text='Indicates if the return record is locked and immutable after processing'),
        ),
        migrations.AddField(
            model_name='return',
            name='locked_at',
            field=models.DateTimeField(blank=True, help_text='When the record was locked for immutability', null=True),
        ),
        migrations.AddField(
            model_name='return',
            name='original_total',
            field=models.DecimalField(blank=True, decimal_places=2, help_text='Original total amount before any changes (for audit purposes)', max_digits=12, null=True),
        ),
        migrations.AddField(
            model_name='sale',
            name='is_locked',
            field=models.BooleanField(default=False, help_text='Indicates if the sale record is locked and immutable after completion'),
        ),
        migrations.AddField(
            model_name='sale',
            name='locked_at',
            field=models.DateTimeField(blank=True, help_text='When the record was locked for immutability', null=True),
        ),
        migrations.AddField(
            model_name='sale',
            name='original_total',
            field=models.DecimalField(blank=True, decimal_places=2, help_text='Original total amount before any changes (for audit purposes)', max_digits=12, null=True),
        ),
        migrations.CreateModel(
            name='WebhookLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payload', models.JSONField(help_text='The JSON payload sent to the webhook')),
                ('response_status', models.IntegerField(blank=True, help_text='HTTP status code from webhook response', null=True)),
                ('response_content', models.TextField(blank=True, help_text='Response content from webhook')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('success', models.BooleanField(default=False)),
                ('error_message', models.TextField(blank=True)),
                ('webhook', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='pos_app.webhook')),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='EcommerceSyncLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('sync_type', models.CharField(choices=[('product', 'Product Sync'), ('inventory', 'Inventory Sync'), ('order', 'Order Sync'), ('customer', 'Customer Sync')], help_text='Type of sync operation', max_length=20)),
                ('status', models.CharField(choices=[('started', 'Started'), ('success', 'Success'), ('failed', 'Failed'), ('partial', 'Partial Success')], max_length=20)),
                ('records_synced', models.IntegerField(default=0, help_text='Number of records successfully synced')),
                ('total_records', models.IntegerField(default=0, help_text='Total number of records processed')),
                ('error_message', models.TextField(blank=True, help_text='Error message if sync failed')),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('platform', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sync_logs', to='pos_app.ecommerceplatform')),
            ],
            options={
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='PaymentToken',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('token', models.CharField(help_text='Token from payment gateway', max_length=255, unique=True)),
                ('gateway', models.CharField(choices=[('stripe', 'Stripe'), ('paypal', 'PayPal'), ('square', 'Square'), ('razorpay', 'Razorpay')], help_text='Payment gateway provider', max_length=20)),
                ('masked_card_number', models.CharField(blank=True, help_text='Masked card number for display', max_length=20)),
                ('expiry_month', models.PositiveSmallIntegerField(blank=True, help_text='Card expiry month', null=True)),
                ('expiry_year', models.PositiveSmallIntegerField(blank=True, help_text='Card expiry year', null=True)),
                ('card_brand', models.CharField(blank=True, help_text='Card brand (Visa, Mastercard, etc.)', max_length=20)),
                ('is_default', models.BooleanField(default=False, help_text="Whether this is the customer's default payment method")),
                ('is_active', models.BooleanField(default=True, help_text='Whether this token is still valid')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payment_tokens', to='pos_app.customer')),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('customer', 'token')},
            },
        ),
    ]
